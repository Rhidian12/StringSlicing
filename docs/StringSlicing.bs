<pre class='metadata'>
Title: DOCUMENT NUMBER? Adding string-slicing to C++
Shortname: String-slicing in C++
Level: 6
Status: iso/D
Group: EWG
URL: TBA
Editor: rhidiandewit@gmail.com
Abstract: Parsing in C++ has improved a lot over the years with the introduction of `std::basic_string::contains()`, `std::basic_string::starts_with()` and `std::basic_string::ends_with()`.<br>One thing that misses in this list of additions is *string slicing* where the user can select a part of a string with a *start index* and *end index*, as opposed to a *start index* and a *count*.
Markup Shorthands: markdown yes, css no
Boilerplate: omit conformance, copyright no
Default Highlight: cpp
</pre>

Table of Contents {#tableofcontents}
========
- [Changelog](#changelog)
	- \[R6](#r6)
	- \[R5](#r5)
	- \[R4](#r4)
	- \[R3](#r3)
	- \[R2](#r2)
	- \[R1](#r1)
- [Motivation and Scope](#motivation)
- [Impact on the Standard](#impact)
- [Technical Specifications](#technical)
- [Proposed Wording](#proposedwording)
	- <span style="font-family:Georgia, serif;">[Addition to string](#additiontostring)</span>
	- <span style="font-family:Georgia, serif;">[std::basic_string::subview](#basicstringsubview)</span>
	- <span style="font-family:Georgia, serif;">[Addition to string_view](#additiontostringview)</span>
	- <span style="font-family:Georgia,	serif;">[std:basic_string_view::subview](#basicstringviewsubview)</span>
- [Acknowledgements](#acknowledgements)

Changelog {#changelog}
========
## R6 ## {#r6}
- Remove multi-indexed operator[] for conformity reasons with matrices and other data structures
- Adjust proposed wording
- Adjust Motivation and Scope
- Adjust Impact on the Standard
- Remove `first(n)` and `last(n)`. These will be added in a different paper.
- Removed Design Decisions
- Added `.subview()` also to `std::basic_string_view`
- Adjust function name from `slice()` to `subview()`

## R5 ## {#r5}
- Added multi-indexed operator[] for unsafe variant of `std::string::slice(size_t start, size_t end)`
- Adjust proposed wording

## R4 ## {#r4}
- Removed `std::basic_string::slice(size_t start, size_t end, size_t step)` since with the addition of [std::stride_view](https://wg21.link/p1899) it will no longer be necessary.<br>
- Added proposed wording
- Made functions `constexpr`, `const` and `noexcept` (where applicable)

## R3 ## {#r3}
- Added unit tests to a [GitHub project](https://github.com/Rhidian12/StringSlicing).<br>

## R2 ## {#r2}
- `std::basic_string::slice()` now throws `std::out_of_range` when `start >= size()`.<br>

## R1 ## {#r1}
- Removed default parameter from `std::basic_string::slice(size_t start, size_t end, size_t step)`.<br>

Motivation and Scope {#motivation}
========
<s>Parsing and string manipulation in C++ used to be very cumbersome, with seemingly basic and trivial methods missing from `std::basic_string`. The introduction of C++20 and C++23 resolved some of these issues by adding the above listed utility functions.<br>
I believe we can make string manipulation in C++ even better by adding more of these utility functions to `std::basic_string`, and one option I always miss, that is present in other programming languages (such as Python), is *string-slicing*.
Python's string-slicing is very graceful and easy-to-use, but C++ does not support that syntax.<br>
Instead, I propose to add a `subview()` function to `std::basic_string` and `std::string_view` to emulate string-slicing.</s><br>
I think `.substr()` can sometimes be a bit cumbersome to use, especially when the substring you're trying to get is easily gotten via a start and end index, instead of a start and count.<br>
`.subview()` will be in function identical to `.substr()`. Its main purpose is for variety in the API for programmers who prefer using `start, end` over `start, count`.<br>
Why would we even want this? Take the following example:
```
const std::string google{ "www.google.com" };

// Subview
std::cout << google.subview(google.find('.') + 1, google.find_last_of('.')) << "\n";

// Substr
size_t start = google.find('.') + 1;
std::cout << google.substr(start, google.find_last_of('.') - start) << "\n";
```
Both do functionally the same thing, but `.substr()` requires a calculation to get the length **and** a need to store `start` since we need it to calculate the length of the substring (although this is not technically necessary, not doing so leads to code duplication), while `.subview()` can simply pass the same start and just `.find_last_of()` instead of having to calculate a length.

At the end of the day, this is more about adding to the richness of the API and making the API nicer for some programmers than it is about replacing `.substr()` or creating entirely new functionality.

Impact on the Standard {#impact}
========
Since these are only trivial functions requiring no major changes to the language or changes to existing API, the impact of this proposal on the standard is minimal.<br>
These functions can already be implemented in the current version of C++23 without any extra changes.<br>

Implementation will be left up to the vendor of course, but since these are trivial functions, we can provide a "template" implementation.

Technical Specifications {#technical}
========
1. `std::basic_string::subview()` takes 2 parameters: `size_t start` and `size_t end` and returns a `std::basic_string`.
	- `start` is the starting index (inclusive) of where to start the slice.
		- `std::out_of_range` is thrown when `start >= size()`.
	- `end` is the ending index (exclusive) of where to end the slice.
		- if `end > size()` then `end` will be set to `size()`
		- if `end < start` then `end` will be set to `start`
2. `std::basic_string_view::subview()` takes 2 parameters: `size_t start` and `size_t end` and returns a `std::basic_string_view`.
	- `start` is the starting index (inclusive) of where to start the slice.
		- `std::out_of_range` is thrown when `start >= size()`.
	- `end` is the ending index (exclusive) of where to end the slice.
		- if `end > size()` then `end` will be set to `size()`
		- if `end < start` then `end` will be set to `start`

These are easily implemented functions and depend on specific vendor-implementation of `std::basic_string` and `std::basic_string_view`, but I have provided [unit tests](https://github.com/Rhidian12/StringSlicing/blob/main/src/main.cpp) and [sample implementations](https://github.com/Rhidian12/StringSlicing/blob/main/src/StringSlicing.h) [here](https://github.com/Rhidian12/StringSlicing).


Proposed Wording {#proposedwording}
========
## Addition to `<string>` ## {#additiontostring}
Add the following to 23.4.3.1 [basic.string.general](https://eel.is/c++draft/basic.string.general):<br>
```
// [...]
namespace std {
	// [...]
	
	// [string.ops], string operations
	// [...]
	constexpr bool contains(const charT* x) const;
	
	constexpr basic_string subview(size_t start, size_t end) const;
}
```

## `std::basic_string::subview` ## {#basicstringsubview}
Add the following subclause to 23.4.3.8 [string.ops](https://eel.is/c++draft/string.ops):<br>
- 23.4.3.?:			`basic_string::subview`			`[string.subview]`
	- `constexpr basic_string<charT, traits> subview(size_t start, size_t end) const;`
		1. *Effects*: Determines the effective length `xlen` of the string to be returned as `std::max(std::min(end, size()), start)`.<br>
			Returns the characters in the range `[data() + start, data() + xlen);`
		2. *Returns*: `basic_string<charT, traits>(data() + start, end)`
		3. *Throws*: `out_of_range` if `start >= size()`


## Addition to `<string_view>` ## {#additiontostringview}
Add the following to 23.3.3.1 [string.view.template.general](https://eel.is/c++draft/string.view.template.general):<br>
```
namespace std {
	// [...]
	
	// [string.ops], string operations
	// [...]
	constexpr basic_string_view substr(size_type pos = 0,
										size_type n = npos) const;       // freestanding-deleted	
									   
	constexpr basic_string_view subview(size_t start, size_t end) const;
}
```

## `std::basic_string_view::subview` ## {#basicstringviewsubview}
Add the following subclause to 23.3.3.8 [string.view.ops](https://eel.is/c++draft/string.view.ops):<br>
- 23.4.3.?:			`basic_string_view::subview`			`[string.view.subview]`
	- `constexpr basic_string_view<charT, traits> subview(size_t start, size_t end) const;`
		1. *Effects*: Determines the effective length `xlen` of the string to be returned as `std::max(std::min(end, size()), start)`.<br>
			Returns the characters in the range `[data() + start, data() + xlen);`
		2. *Returns*: `basic_string_view<charT, traits>(data() + start, end)`
		3. *Throws*: `out_of_range` if `start >= size()`
		

Acknowledgements {#acknowledgements}
========
The author thanks both Zhihao Yuan and Nathaniel Rupprecht and many others for their suggestions to this proposal.